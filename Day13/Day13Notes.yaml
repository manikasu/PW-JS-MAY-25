📑 Agenda for Week 7 Day 1: Advanced Playwright Interactions
🎯 Focus: Exploring Advanced Features for Enhanced Playwright Automation

📆 Date: 05 July [Saturday]

⿡ Test Annotations

* Enhancing test readability and control using annotations.
* Examples: Skipping, focusing, or tagging specific tests.

⿢  Tracing

* Leveraging tracing for debugging and analyzing test execution.
* Generating and interpreting trace reports.

⿣  Geolocation

* Simulating geolocation data for location-based testing.
* Practical use cases: Testing location-restricted functionalities.

⿤ Device Emulation

* Emulating various devices and screen resolutions in Playwright.
* Practical examples: Testing responsive designs and mobile-specific features.

⿥ Visual Regression Testing

* Capturing and comparing UI snapshots to detect unintended changes.
* Use cases: Ensuring consistent UI across versions and devices.

⿦  Persistent Context (Non-incognito mode)

* Maintaining login/session state across test runs using user data directories.
* Real-world example: Avoid repeated logins for authenticated flows.

⿧ Codegen (Code Generation)

* Auto-generating Playwright scripts by recording user interactions.
* Benefits: Faster test creation and onboarding for beginners.

🕡 Wrap Up / Q\&A

📝 Keep your physical notebook and pen handy to sketch out ideas!

Test Annotations :
-----------------

--> Control the behaviour of the excution.

test.only --> focus on a specific test.
test.skip --> ignore the test from execution
test.fixme --> track and know failures that are yet tp be fixed
test.fail --> for negative testing --> test has to fail is the expectation
test.slow --> double the timeout of the tests execution --> 30 s --> 60 s for the entire test execution
test.describe --> grouping the test depending on the status of the other test.
test.use -->use the functionalities

hooks
------
test.beforeAll --> before all test it will be executed
test.beforeEach --> before each test it will be executed
test.afterEach -->  after each test it will be executed
test.afterAll --> after all test it will be executed




