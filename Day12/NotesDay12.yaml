
1.Global variable
2. Collection variable
3. Environment variable


Global-->global.set--> value is accesible across all collections
Collection -> collection.set -->  value is accesible onlt to that particular collection.
Environment-> Accessible to only that environment.

Best practice is to paramaterize data to make all your data resuable.

page fixture :

browser = chromium.launch() --> connect browser engine
context = browser.newContext() --> window is launched
page = context.newPage() -->tab loaded on the window.

API testing is going to directly connected to your CDP network tabs to handle your API.

request fixture :

APIRequestContext --> Interface provided ny playwright to make your API calls.
Give the API request contect to work with your API calls



{
  result: {
    parent: '',
    made_sla: 'true',
    caused_by: '',
    watch_list: '',
    upon_reject: 'cancel',
    sys_updated_on: '2025-06-29 10:29:09',
    child_incidents: '0',
    hold_reason: '',
    origin_table: '',
    task_effective_number: 'INC0010106',
    approval_history: '',
    number: 'INC0010106',
    resolved_by: '',
    sys_updated_by: 'admin',
    opened_by: {
      link: 'https://dev281454.service-now.com/api/now/table/sys_user/6816f79cc0a8016401c5a33be04be441',
      value: '6816f79cc0a8016401c5a33be04be441'
    },
    user_input: '',
    sys_created_on: '2025-06-29 10:29:09',
    sys_domain: {
      link: 'https://dev281454.service-now.com/api/now/table/sys_user_group/global',
      value: 'global'
    },
    state: '1',
    route_reason: '',
    sys_created_by: 'admin',
    knowledge: 'false',
    order: '',
    calendar_stc: '',
    closed_at: '',
    cmdb_ci: '',
    delivery_plan: '',
    contract: '',
    impact: '3',
    active: 'true',
    work_notes_list: '',
    business_service: '',
    business_impact: '',
    priority: '5',
    sys_domain_path: '/',
    rfc: '',
    time_worked: '',
    expected_start: '',
    opened_at: '2025-06-29 10:29:09',
    business_duration: '',
    group_list: '',
    work_end: '',
    caller_id: '',
    reopened_time: '',
    resolved_at: '',
    approval_set: '',
    subcategory: '',
    work_notes: '',
    universal_request: '',
    short_description: '',
    close_code: '',
    correlation_display: '',
    delivery_task: '',
    work_start: '',
    assignment_group: '',
    additional_assignee_list: '',
    business_stc: '',
    cause: '',
    description: 'Creating issue through Playwright',
    origin_id: '',
    calendar_duration: '',
    close_notes: '',
    notify: '1',
    service_offering: '',
    sys_class_name: 'incident',
    closed_by: '',
    follow_up: '',
    parent_incident: '',
    sys_id: 'ba071cb7c35a2210f92c36dc050131d2',
    contact_type: '',
    reopened_by: '',
    incident_state: '1',
    urgency: '3',
    problem_id: '',
    company: '',
    reassignment_count: '0',
    activity_due: '',
    assigned_to: '',
    severity: '3',
    comments: '',
    approval: 'not requested',
    sla_due: '',
    comments_and_work_notes: '',
    due_date: '',
    sys_mod_count: '0',
    reopen_count: '0',
    sys_tags: '',
    escalation: '0',
    upon_approval: 'proceed',
    correlation_id: '',
    location: '',
    category: 'inquiry'
  }
}

faker library installation :

npm install @faker-js/faker