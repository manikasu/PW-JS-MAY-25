📑 Agenda for Week 8 Day 1: OOPs in Framework

🎯 Focus: Mastering Object-Oriented Programming Concepts in TypeScript

📆 12th July, Saturday

🕝 Session Highlights

⿡ Recap
Quick review of previous learnings.

⿢Inheritance
Exploring the concept of inheritance for code reuse.
Examples: Implementing single and multilevel inheritance.

⿣ Abstraction
Using abstract classes and methods to define templates.
Examples: Designing partially implemented base classes.

⏸ \[Break / Practice]

⿤Polymorphism
Understanding method overriding and runtime behavior.
Examples: Creating multiple forms of behavior from a single interface.

⿥POM (Page Object Model)
Design pattern to enhance test maintainability and reusability.
Examples: Creating page classes and using them in test cases.

⿦ Custom Fixture
Creating reusable test setup using custom fixtures.
Examples: Injecting test data, context, or utilities.

🕡 Wrap Up / Q\&A

📝 Keep your physical notebook and pen handy to sketch out ideas and test workflows!


Types of inheritance :

1. Single Inheritance.
A class inherits from one base class.

class A{}
class B extends A {}

2. Multilevel Inheritance.

A class inherits from derived class, forming a chain

class A{}
class B extends A{}
class C extends B{}

3. Hierarchical Inheritance.

class A{}

class B extends A {}
class C extends A {}

4. Hybrid Inheritance.
A combination of two or more types of inheritance (eg. multilevel and Hierarchical)


5. Multiple Inheritance
TypeScript does not support multiple inheritance using classes
Can be achieved throught interface


--------------

Creating the lead using 6 pagers

login --> welcomePage --> homePage --> LeadPage --> createLead --> viewLead
                      -                         -->findLead --> viewLead--> edit
                                                --> mergeLead
                                      Account --> Create Account4
                                      Contact --> create Contact


Page Object Model :
Splits the elments and its actions from the test logic

login --> username, password, login
welcomePage --> crmsfa, logout
homePage--> leads, accounts, Contact, Opportunities
leadsPage --> findLead, createLead


Abstraction :

--> Hide unwanted info to the user.

example : we cannot see the implementation of your page, context browser in playwright everything is put as iunterface


1. Interface :
-Complete hiding of the implementation
-100% abstraction.
-Only unimplemented methods.


2. abstract class :

- 0 to 100% abstraction.
- Method signature / design --> Unimplemented method
- Logic --> Implemented method

Example 

clickLogin() --> Unimplemented method or method signature

clickLogin(){ --> Implemented method
//logic page.locator.click()
}

Summarize on abstract and interface :

class extends another class
abstract class extends another abstract class
interface extends another interface

class extends abstract class
class implements interface

class extends abstract class implements interface


//Note for abstract and interface you cannot create object

⿤Polymorphism :

1. Method Overloading
2. Method Overriding
